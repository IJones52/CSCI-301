#lang racket
;#1
(define member?
  (lambda (x L)
    (if (null? L)
        (not #t)
        (begin
          (if (= x (car L))
              (not #f)
              (begin
                (member? x (cdr L))))))))

;2
(define subset?
  (lambda (L1 L2)
    (if (null? L1)
         (not #f)
         (begin
    (if (not(member? (car L1) L2))
        (not #t)
        (begin
          (subset? (cdr L1) L2)))))))

;3
(define set-equal?
  (lambda (L1 L2)
    (if (and (subset? L1 L2) (subset? L2 L1))
        (not #f)
        (begin
          (not #t)))))
    