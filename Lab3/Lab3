#lang racket
;#1
(define member?
  (lambda (x L)
    (if (null? L)
        (not #t)
        (begin
          (if (= x (car L))
              (not #f)
              (begin
                (member? x (cdr L))))))))

;2
(define subset?
  (lambda (L1 L2)
    (if (null? L1)
         (not #f)
         (begin
    (if (not(member? (car L1) L2))
        (not #t)
        (begin
          (subset? (cdr L1) L2)))))))

;3
(define set-equal?
  (lambda (L1 L2)
    (if (and (subset? L1 L2) (subset? L2 L1))
        (not #f)
        (begin
          (not #t)))))

;4

;Union
(define union
  (lambda (L1 L2)
    (if (null? L1)
        (car (list L2))
        (begin
          (if (member? (car L1) L2)
              (union (cdr L1) L2)
              (begin
                (union (cdr L1) (cons (car L1) L2))))))))

;Intersect
;We need to go through one, find all of the members that are in the other and leave them
;delete the ones that aren't
;figure out how to append the new ones to the end so we can compare a new item

;Might want to scrap this
(define intersect
  (lambda (L1 L2)
    (if (null? L1)
        (car(list L2))
        (begin
          (if (member? (car L1) L2)
              ;If it is a member of both, keep it, if not delete it
              (intersect (cdr L1) (append (list(car L2)) (cdr L2)))
              (begin
                (intersect (cdr L1) (cdr L2))))))))
    