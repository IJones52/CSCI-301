#lang racket
;4
(define gen-list
  (lambda (a b)
    (if(= a b)
       a
       (begin
         (displayln a)
         ;fix your recursion
         (list(gen-list((+1 a) b)))
         ))))

;5
(define sum
  (lambda (L)
    ;if the cdr is empty return the single number
    (if (null? (cdr L))
        (car L)
        (begin
          ;show the list
          (displayln L)
          ;add the current 1st value in the list to the sum of all of the lower values
          (+ (sum(cdr L)) (car L) ))
          )))

;6
;Make sure that n is smaller than the size of L
 (define retrieve-first-n
   (lambda (n L)
     (if (= n 0)
         (car L)
         (begin
           (displayln L)
           (list((retrieve-first-n( (- n 1) (cdr L)))))
           (list L)))))